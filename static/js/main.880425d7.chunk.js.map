{"version":3,"sources":["components/TodoList/TodoList.tsx","api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","setSelectedUserId","todos","useState","selectedTodo","setSelectedTodo","searchInput","setSearchInput","todosFilter","setTodosFilter","filteredTodos","filter","todo","title","includes","isCompleted","completed","className","type","onChange","event","target","value","map","id","userId","isTodoSelected","classNames","htmlFor","readOnly","onClick","onButtonClick","request","endpoint","fetch","then","response","json","defaultUser","name","email","phone","CurrentUser","user","setUser","isLoading","setIsLoading","hasLoadingError","setHasLoadingError","useEffect","getUser","currentUser","error","currentUserContent","App","selectedUserId","setTodos","todoList","sidebarContent","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.880425d7.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport React, { useState } from 'react';\nimport './TodoList.scss';\n\ntype Props = {\n  setSelectedUserId: (userId: number) => void,\n  todos: Todo[],\n};\n\nexport const TodoList: React.FC<Props> = ({\n  setSelectedUserId,\n  todos,\n}) => {\n  const [selectedTodo, setSelectedTodo] = useState(0);\n  const [searchInput, setSearchInput] = useState('');\n  const [todosFilter, setTodosFilter] = useState('all');\n\n  const onButtonClick = (id: number, userId: number) => {\n    setSelectedUserId(userId);\n    setSelectedTodo(id);\n  };\n\n  const onInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchInput(event.target.value);\n  };\n\n  const onSelectChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setTodosFilter(event.target.value);\n  };\n\n  const filteredTodos = todos\n    .filter(todo => todo.title.includes(searchInput))\n    .filter(todo => {\n      const isCompleted = todo.completed;\n\n      switch (todosFilter) {\n        case 'active':\n          return !isCompleted;\n        case 'completed':\n          return isCompleted;\n        default:\n          return true;\n      }\n    });\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n\n      <div className=\"TodoList__list-container\">\n        <input\n          type=\"text\"\n          onChange={onInputChange}\n          value={searchInput}\n        />\n\n        <select\n          value={todosFilter}\n          onChange={onSelectChange}\n        >\n          <option value=\"all\">all</option>\n          <option value=\"active\">active</option>\n          <option value=\"completed\">completed</option>\n        </select>\n\n        <ul className=\"TodoList__list\">\n          {filteredTodos.map(todo => {\n            const {\n              title,\n              id,\n              completed,\n              userId,\n            } = todo;\n            const isTodoSelected = selectedTodo === id;\n\n            return (\n              <li\n                className={classNames(\n                  'TodoList__item',\n                  {\n                    'TodoList__item--checked': completed,\n                    'TodoList__item--unchecked': !completed,\n                  },\n                )}\n                key={id}\n              >\n                <label htmlFor=\"checkbox\">\n                  <input\n                    id=\"checkbox\"\n                    type=\"checkbox\"\n                    readOnly\n                  />\n                  <p>{title}</p>\n                </label>\n\n                <button\n                  className={classNames(\n                    'TodoList__user-button',\n                    {\n                      'TodoList__user-button--selected': isTodoSelected,\n                    },\n                    'button',\n                  )}\n                  type=\"button\"\n                  onClick={() => onButtonClick(id, userId)}\n                >\n                  User&nbsp;#\n                  {userId}\n                </button>\n              </li>\n            );\n          })}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","const request = (\n  endpoint: string,\n) => {\n  return fetch(`https://mate.academy/students-api/${endpoint}`)\n    .then(response => response.json());\n};\n\nexport const getTodos = () => request('todos');\n\nexport const getUser = (userId: number) => request(`users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport { getUser } from '../../api';\nimport './CurrentUser.scss';\n\ntype Props = {\n  userId: number,\n  setSelectedUserId: (userId: number) => void,\n};\n\ninterface User {\n  name: string,\n  email: string,\n  phone: string,\n}\n\nconst defaultUser = {\n  name: '-',\n  email: '-',\n  phone: '-',\n};\n\nexport const CurrentUser: React.FC<Props> = ({\n  userId,\n  setSelectedUserId,\n}) => {\n  const [user, setUser] = useState<User>(defaultUser);\n  const [isLoading, setIsLoading] = useState(false);\n  const [hasLoadingError, setHasLoadingError] = useState(false);\n\n  useEffect(() => {\n    setHasLoadingError(false);\n    setIsLoading(true);\n\n    getUser(userId)\n      .then(currentUser => {\n        if (!currentUser.error) {\n          setUser(currentUser);\n        } else {\n          setHasLoadingError(true);\n        }\n\n        setIsLoading(false);\n      });\n  }, [userId]);\n\n  const { name, email, phone } = user;\n  const currentUserContent = hasLoadingError ? 'Some error...'\n    : (\n      <>\n        <h2 className=\"CurrentUser__title\">\n          <span>\n            Selected user:\n            {' '}\n            {userId}\n          </span>\n        </h2>\n\n        <h3 className=\"CurrentUser__name\">{name}</h3>\n        <p className=\"CurrentUser__email\">{email}</p>\n        <p className=\"CurrentUser__phone\">{phone}</p>\n\n        <button\n          type=\"button\"\n          onClick={() => setSelectedUserId(0)}\n          className=\"button\"\n        >\n          Clear\n        </button>\n      </>\n    );\n\n  return (\n    <div className=\"CurrentUser\">\n      {isLoading ? 'Loading...' : currentUserContent}\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api';\n\nconst App: React.FC = () => {\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [todos, setTodos] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [hasLoadingError, setHasLoadingError] = useState(false);\n\n  useEffect(() => {\n    setHasLoadingError(false);\n    setIsLoading(true);\n\n    getTodos()\n      .then(todoList => {\n        if (!todoList.error) {\n          setTodos(todoList);\n        } else {\n          setHasLoadingError(true);\n        }\n\n        setIsLoading(false);\n      });\n  }, []);\n\n  const sidebarContent = hasLoadingError ? 'Some Error...'\n    : (\n      <div className=\"App__sidebar\">\n        <TodoList\n          setSelectedUserId={setSelectedUserId}\n          todos={todos}\n        />\n      </div>\n    );\n\n  return (\n    <div className=\"App\">\n      {isLoading ? 'Loading'\n        : sidebarContent}\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser\n              userId={selectedUserId}\n              setSelectedUserId={setSelectedUserId}\n            />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}